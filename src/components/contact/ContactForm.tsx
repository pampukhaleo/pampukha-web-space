
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';

export const ContactForm = () => {
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    message: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [showLocalDevDialog, setShowLocalDevDialog] = useState(false);
  const [formSubmittedLocally, setFormSubmittedLocally] = useState(false);

  // Detect if we're in local development
  const isLocalDevelopment = window.location.hostname === 'localhost';

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    if (error) setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    // For local development, show dialog with form data instead of API call
    if (isLocalDevelopment) {
      setFormSubmittedLocally(true);
      setShowLocalDevDialog(true);
      setIsSubmitting(false);
      
      // Reset form in local development
      setFormData({ name: '', email: '', phone: '', message: '' });
      return;
    }

    try {
      // Create the text for Telegram message
      const telegramText = `
üÜï *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É Leonforge*:

üë§ *–Ü–º'—è:* ${formData.name}
üìß *Email:* ${formData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
${formData.message}
      `;

      const apiUrl = 'https://fwwpidktaanowpaihgzy.supabase.co/functions/v1/swift-responder';
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      // Handle different response types
      let data;
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        data = await response.json();
      } else {
        // Handle non-JSON responses gracefully
        const textResponse = await response.text();
        
        if (!response.ok) {
          throw new Error(`Server returned ${response.status}: ${textResponse || response.statusText}`);
        }
        
        data = { success: response.ok };
      }

      if (!response.ok) {
        throw new Error(data.error || `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      // Show success message
      toast({
        title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!",
        description: "–î—è–∫—É—é –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Äî —è –∑–≤'—è–∂—É—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
      });

      // Reset form
      setFormData({ name: '', email: '', phone: '', message: '' });
    } catch (error) {
      
      // Provide a more helpful error message in development
      let errorMessage;
      if (error instanceof Error) {
        errorMessage = error.message;
        
        // Check for 404 errors which are common in local development
        if (errorMessage.includes('404') || errorMessage.includes('Not Found')) {
          errorMessage = 'API endpoint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –£ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.';
        }
      } else {
        errorMessage = '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫';
      }
      
      setError(errorMessage);
      
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞!",
        description: "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞ email.",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Card className="bg-card border border-border shadow-md text-card-foreground max-w-2xl mx-auto w-full">
      <CardContent className="p-8">
          <h3 className="text-2xl font-bold mb-6">–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é</h3>

          {error && (
            <Alert className="mb-6 border-red-300 bg-red-50 dark:bg-red-900/10">
              <AlertDescription className="text-red-800 dark:text-red-200">
                {error}
              </AlertDescription>
            </Alert>
          )}

          {isLocalDevelopment && !error && (
            <Alert className="mb-6 border-amber-300 bg-amber-50 dark:bg-amber-900/10">
              <AlertDescription className="text-amber-800 dark:text-amber-200">
                –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: —Ñ–æ—Ä–º–∞ –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó –±–µ–∑ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
              </AlertDescription>
            </Alert>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="name" className="block mb-2 font-medium">
                –Ü–º'—è
              </label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                required
                className="w-full p-3 rounded-lg bg-input text-foreground border border-border"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="email" className="block mb-2 font-medium">
                  Email
                </label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="–≤–∞—à@email.com"
                  required
                  className="w-full p-3 rounded-lg bg-input text-foreground border border-border"
                />
              </div>
              <div>
                <label htmlFor="phone" className="block mb-2 font-medium">
                  –¢–µ–ª–µ—Ñ–æ–Ω
                </label>
                <Input
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  required
                  placeholder="+380 –•–• –•–•–• –•–•–•–•"
                  className="w-full p-3 rounded-lg bg-input text-foreground border border-border"
                />
              </div>
            </div>

            <div>
              <label htmlFor="message" className="block mb-2 font-medium">
                –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
              </label>
              <Textarea
                id="message"
                name="message"
                value={formData.message}
                onChange={handleChange}
                placeholder="–û–ø–∏—à—ñ—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç —á–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è..."
                rows={5}
                required
                className="w-full p-3 rounded-lg resize-none bg-input text-foreground border border-border"
              />
            </div>

            <Button
              type="submit"
              className="w-full bg-primary hover:bg-primary/90 py-6 text-lg"
              disabled={isSubmitting}
            >
              {isSubmitting ? '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è...' : '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç'}
            </Button>

            <p className="text-sm text-muted-foreground text-center">
              –ù–∞–¥—Å–∏–ª–∞—é—á–∏ —Ñ–æ—Ä–º—É, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –Ω–∞—à–æ—é –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.
            </p>
          </form>
        </CardContent>
      </Card>

      {/* Local Development Dialog - Shows form data for testing */}
      <Dialog open={showLocalDevDialog} onOpenChange={setShowLocalDevDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–§–æ—Ä–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (–õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ)</DialogTitle>
            <DialogDescription>
              –£ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ —Ü—è —Ñ–æ—Ä–º–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram. –í –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –¥–∞–Ω—ñ, —è–∫—ñ –±—É–ª–æ –± –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.
            </DialogDescription>
          </DialogHeader>
          <div className="mt-4 space-y-3 text-sm">
            <p><strong>–Ü–º'—è:</strong> {formSubmittedLocally ? formData.name || '(–±—É–ª–æ –æ—á–∏—â–µ–Ω–æ)' : ''}</p>
            <p><strong>Email:</strong> {formSubmittedLocally ? formData.email || '(–±—É–ª–æ –æ—á–∏—â–µ–Ω–æ)' : ''}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {formSubmittedLocally ? formData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' : ''}</p>
            <p><strong>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</strong> {formSubmittedLocally ? formData.message || '(–±—É–ª–æ –æ—á–∏—â–µ–Ω–æ)' : ''}</p>
          </div>
          <p className="mt-4 text-xs text-muted-foreground">
            –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ API —Å–µ—Ä–≤–µ—Ä –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º.
          </p>
        </DialogContent>
      </Dialog>
    </>
  );
};
